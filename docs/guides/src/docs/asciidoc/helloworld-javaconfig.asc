=  Hello Spring安全性Java配置
:author: Rob Winch
:starter-appname: insecure
:starter-config-type: xml
:completed-appname: helloworld
:completed-config-type: javaconfig
:include-dir: _includes
:hello-include-dir: _hello-includes

本指南提供了有关如何在不使用XML的情况下将Spring Security添加到现有应用程序的说明。

include::{include-dir}/setting-up-the-sample.asc[]

确保应用程序正在运行，确保在http：// localhost：8080 / sample /目录中显示页面*TODO Secure this*。

验证应用程序运行后，使用以下步骤停止应用程序服务器：

* 在服务器视图中选择最新的tc服务器
* 单击停止按钮（红色方块）停止应用程序服务器

include::{hello-include-dir}/secure-the-application-javaconfig.asc[]

=== 注册Spring Security与战争

我们已经创建了Spring Security配置，但我们仍然需要在战争中注册它。这可以使用以下步骤完成：

* 转到*Package Explorer*视图
* 右键单击*spring-security-samples-{starter-config-type}-{starter-appname}*项目中的*org.springframework.security.samples.config*包
* 选择*New->Class*
* 为*Name*输入_SecurityWebApplicationInitializer_
* 点击*Finish*
* 将文件替换为以下内容：

的.src /主/ JAVA /组织/ springframework的/安全/样品/配置/ SecurityWebApplicationInitializer.java
[source,java]
----
package org.springframework.security.samples.config;

import org.springframework.security.web.context.*;

public class SecurityWebApplicationInitializer
      extends AbstractSecurityWebApplicationInitializer {

    public SecurityWebApplicationInitializer() {
        super(SecurityConfig.class);
    }
}
----

`SecurityWebApplicationInitializer`将执行以下操作：

* 为应用程序中的每个URL自动注册springSecurityFilterChain过滤器
* 添加加载<<security-config-java,SecurityConfig>>的ContextLoaderListener。

注意：由于我们尚未使用Spring，因此这是添加我们的<<security-config-java,SecurityConfig>>的简单方法。如果我们已经在使用Spring，那么我们应该为我们的<<security-config-java,SecurityConfig>>添加Spring配置的重置（即AbstractContextLoaderInitializer或AbstractDispatcherServletInitializer的子类），并使用默认的构造函数。

include::{hello-include-dir}/exploring-the-secured-application-javaconfig.asc[]

==== 显示用户名

现在我们已经通过身份验证，让我们更新应用程序以显示用户名。将index.jsp的主体更新为以下内容：

的.src /主/ web应用/ index.jsp的
[source,html]
----
<body>
  <div class="container">
    <h1>This is secured!</h1>
    <p>
      Hello <b><c:out value="${pageContext.request.remoteUser}"/></b>
    </p>
  </div>
</body>
----

警告：`<c:out />`标记确保用户名被转义以避免 http://en.wikipedia.org/wiki/Cross-site_scripting[XSS漏洞]无论应用程序如何呈现用户输入值，它都应确保这些值已正确转义。

刷新页面http：// localhost：8080 / sample /，您将看到显示的用户名。这是有效的，因为Spring Security集成了<<servlet-api-integration,Servlet API methods>>

==== 注销

现在我们可以查看用户名，让我们更新应用程序以允许注销。更新index.jsp的主体以包含注销表单，如下所示：

的.src /主/ web应用/ index.jsp的
[source,html]
----
<body>
  <div class="container">
    <h1>This is secured!</h1>
    <p>
      Hello <b><c:out value="${pageContext.request.remoteUser}"/></b>
    </p>
    <c:url var="logoutUrl" value="/logout"/>
    <form class="form-inline" action="${logoutUrl}" method="post">
      <input type="submit" value="Log out" />
      <input type="hidden" name="${_csrf.parameterName}" value="${_csrf.token}"/>
    </form>
  </div>
</body>
----

为了帮助防范 http://en.wikipedia.org/wiki/Cross-site_request_forgery[CSRF攻击]，默认情况下，Spring Security Java Configuration注销需要：

*  HTTP方法必须是POST
*  CSRF令牌必须添加到请求中。您可以使用属性_csrf在ServletRequest上访问它，如上所示。

注意：如果您使用Spring MVC的标签库或Thymeleaf，CSRF令牌会自动添加为您的隐藏输入。

刷新页面http：// localhost：8080 / sample /，您将看到注销按钮。点击注销按钮，看到应用程序成功注销。

== 结论

您现在应该知道如何使用Spring Security来保护您的应用程序，而不使用任何XML。要了解更多信息，请参阅 link:index.html[Spring Security Guides索引页面]。

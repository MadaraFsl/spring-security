=  Hello Spring安全性Xml配置
:author: Joe Grandja
:starter-appname: insecure
:starter-config-type: xml
:completed-appname: helloworld
:completed-config-type: xml
:include-dir: _includes
:hello-include-dir: _hello-includes

本指南提供了有关如何将Spring Security添加到使用XML配置的现有应用程序的说明。

include::{include-dir}/setting-up-the-sample.asc[]

确保应用程序正在运行，确保在http：// localhost：8080 / sample /目录中显示页面*TODO Secure this*。

验证应用程序运行后，使用以下步骤停止应用程序服务器：

* 在服务器视图中选择最新的tc服务器
* 单击停止按钮（红色方块）停止应用程序服务器

include::{hello-include-dir}/secure-the-application-xml.asc[]

=== 注册Spring Security与战争

我们已经创建了Spring Security配置，但我们仍然需要在战争中注册它。这可以使用以下步骤完成：

* 在Package Explorer视图中，右键单击文件夹_src / main / webapp / WEB-INF_
* 选择*New->File*
* 为*File name*输入_web.xml_
* 点击*Finish*
* 用以下内容替换文件的内容：

的.src /主/ web应用/ WEB-INF / web.xml中
[source,xml]
----
<?xml version="1.0" encoding="UTF-8"?>
<web-app version="3.0" xmlns="http://java.sun.com/xml/ns/javaee"
		 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
  http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd">

	<!--
	  - Location of the XML file that defines the root application context
	  - Applied by ContextLoaderListener.
	  -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
			/WEB-INF/spring/*.xml
		</param-value>
	</context-param>


	<filter>
		<filter-name>springSecurityFilterChain</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>springSecurityFilterChain</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!--
	  - Loads the root application context of this web app at startup.
	  - The application context is then available via
	  - WebApplicationContextUtils.getWebApplicationContext(servletContext).
	-->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

</web-app>
----

_web.xml_将执行以下操作：

* 为应用中的每个网址注册`springSecurityFilterChain`过滤器
* 添加加载<<security-config-xml,security-config-xml>>的`ContextLoaderListener`。

include::{hello-include-dir}/exploring-the-secured-application-xml.asc[]

==== 显示用户名

现在我们已经通过身份验证，让我们更新应用程序以显示用户名。将index.jsp的主体更新为以下内容：

的.src /主/ web应用/ index.jsp的
[source,html]
----
<body>
  <div class="container">
    <h1>This is secured!</h1>
    <p>
      Hello <b><c:out value="${pageContext.request.remoteUser}"/></b>
    </p>
  </div>
</body>
----

警告：`<c:out />`标记确保用户名被转义以避免 http://en.wikipedia.org/wiki/Cross-site_scripting[XSS漏洞]无论应用程序如何呈现用户输入值，它都应确保这些值已正确转义。

刷新页面http：// localhost：8080 / sample /，您将看到显示的用户名。这是有效的，因为Spring Security集成了<<servlet-api-integration,Servlet API methods>>

==== 注销

现在我们可以查看用户名，让我们更新应用程序以允许注销。更新index.jsp的主体以包含注销表单，如下所示：

的.src /主/ web应用/ index.jsp的
[source,html]
----
<body>
  <div class="container">
    <h1>This is secured!</h1>
    <p>
      Hello <b><c:out value="${pageContext.request.remoteUser}"/></b>
    </p>
    <c:url var="logoutUrl" value="/logout"/>
    <form class="form-inline" action="${logoutUrl}" method="post">
      <input type="submit" value="Log out" />
      <input type="hidden" name="${_csrf.parameterName}" value="${_csrf.token}"/>
    </form>
  </div>
</body>
----

为了帮助抵御 http://en.wikipedia.org/wiki/Cross-site_request_forgery[CSRF攻击]，默认情况下，Spring Security Xml配置注销需要：

*  HTTP方法必须是POST
*  CSRF令牌必须添加到请求中。您可以使用属性_csrf在ServletRequest上访问它，如上所示。

注意：如果您使用Spring MVC的标签库或Thymeleaf，CSRF令牌会自动添加为您的隐藏输入。

刷新页面http：// localhost：8080 / sample /，您将看到注销按钮。点击注销按钮，看到应用程序成功注销。

== 结论

您现在应该知道如何使用Spring Security with XML保护您的应用程序。要了解更多信息，请参阅 link:index.html[Spring Security Guides索引页面]。

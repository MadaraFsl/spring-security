== 确保应用程序安全

在确保您的应用程序安全之前，确保现有应用程序按照我们在<<running-the-{starter-appname}-application>>中进行的操作很重要。现在应用程序运行时没有安全性，我们已经准备好为我们的应用程序添加安全性。本节展示了将Spring Security添加到我们的应用程序的最小步骤。

=== 更新您的依赖关系

包括:: ../ {包括-行家-库} []

为了使用Spring Security，你必须添加必要的依赖关系。对于示例，我们将添加以下Spring Security依赖项：

.pom.xml
[source,xml]
[subs="verbatim,attributes"]
----
<dependencies>
  <!-- ... other dependency elements ... -->
  <dependency>
    <groupId>org.springframework.security</groupId>
    <artifactId>spring-security-web</artifactId>
    <version>{spring-security-version}</version>
  </dependency>
  <dependency>
    <groupId>org.springframework.security</groupId>
    <artifactId>spring-security-config</artifactId>
    <version>{spring-security-version}</version>
  </dependency>
</dependencies>
----

完成此操作后，您需要确保STS通过以下方式了解更新后的依赖关系：

* 右键单击_spring-security-samples- {starter-config-type}  -  {starter-appname} _应用程序
* 选择*Maven->Update project...*
* 确保选择项目，然后点击*OK*

=== 创建您的Spring Security配置

下一步是创建一个Spring Security配置。

* 右键单击Package Explorer视图中的_spring-security-samples- {starter-config-type}  -  {starter-appname} _项目
* 选择*New->Class*
* 为*Package*输入_org.springframework.security.samples.config_
* 为*Name*输入_SecurityConfig_
* 点击*Finish*
* 将文件替换为以下内容：

[[security-config-java]]
的.src /主/ JAVA /组织/ springframework的/安全/样品/配置/ SecurityConfig.java
[source,java]
----
package org.springframework.security.samples.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.configuration.*;

@EnableWebSecurity
public class SecurityConfig {

    @Autowired
    public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {
        auth
            .inMemoryAuthentication()
                .withUser("user").password("password").roles("USER");
    }
}
----

注意：configureGlobal方法的名称并不重要。但是，仅在使用`@EnableWebSecurity`，`@EnableGlobalMethodSecurity`或`@EnableGlobalAuthentication`注释的类中配置AuthenticationManagerBuilder非常重要。否则会产生不可预测的结果。

[[servlet-api-integration]]
<<security-config-java,SecurityConfig>>将会：

* 要求对您的应用程序中的每个URL进行身份验证
* 为您生成一个登录表单
* 允许具有*Username* _user_和*Password* _password_的用户使用基于表单的身份验证进行身份验证
* 允许用户注销
*  http://en.wikipedia.org/wiki/Cross-site_request_forgery[CSRF攻击]预防
*  http://en.wikipedia.org/wiki/Session_fixation[会话固定]保护
* 安全标题集成
用于安全请求的**  http://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security[HTTP严格传输安全]
**  http://msdn.microsoft.com/en-us/library/ie/gg622941(v=vs.85).aspx[X-Content-Type的选项]集成
** 高速缓存控制（稍后可由应用程序覆盖，以允许缓存静态资源）
**  http://msdn.microsoft.com/en-us/library/dd565647(v=vs.85).aspx[X-XSS-保护]集成
**  X-​​Frame-Options集成有助于防止 http://en.wikipedia.org/wiki/Clickjacking[点击劫持]
* 与以下Servlet API方法集成
**  http://docs.oracle.com/javaee/6/api/javax/servlet/http/HttpServletRequest.html#getRemoteUser()[HttpServletRequest的＃getRemoteUser（）]
**  http://docs.oracle.com/javaee/6/api/javax/servlet/http/HttpServletRequest.html#getUserPrincipal()[HttpServletRequest.html＃getUserPrincipal（）]
**  http://docs.oracle.com/javaee/6/api/javax/servlet/http/HttpServletRequest.html#isUserInRole(java.lang.String)[HttpServletRequest.html＃的isUserInRole（java.lang.String中）]
**  http://docs.oracle.com/javaee/6/api/javax/servlet/http/HttpServletRequest.html#login(java.lang.String,%20java.lang.String)[HttpServletRequest.html＃login（java.lang.String，java.lang.String）]
**  http://docs.oracle.com/javaee/6/api/javax/servlet/http/HttpServletRequest.html#logout()[HttpServletRequest.html＃注销（）]


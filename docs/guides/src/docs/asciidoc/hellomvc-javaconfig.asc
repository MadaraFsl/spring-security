=  Hello Spring MVC安全性Java配置
:author: Rob Winch
:starter-appname: insecuremvc
:starter-config-type: xml
:completed-appname: hellomvc
:completed-config-type: javaconfig
:include-dir: _includes
:hello-include-dir: _hello-includes

本指南提供了有关如何在不使用XML的情况下将Spring Security添加到现有Spring MVC应用程序的说明。

include::{include-dir}/setting-up-the-sample.asc[]

确认应用程序正在运行：

* 显示用户收件箱的页面可以在http：// localhost：8080 / sample /
* 尝试点击撰写链接并创建消息。应显示消息详细信息。
* 现在点击收件箱链接并查看列出的消息。您可以点击摘要链接查看再次显示的详细信息。


include::{hello-include-dir}/secure-the-application-javaconfig.asc[]

=== 注册Spring Security与战争

我们已经创建了Spring Security配置，但我们仍然需要在战争中注册它。这可以使用以下步骤完成：

* 右键单击Package Explorer视图中的_spring-security-samples- {starter-config-type}  -  {starter-appname} _项目
* 选择*New->Class*
* 为*Package*输入_org.springframework.security.samples.config_
* 为*Name*输入MessageSecurityWebApplicationInitializer
* 点击*Finish*
* 将文件替换为以下内容：

的.src /主/ JAVA /组织/ springframework的/安全/样品/配置/ MessageSecurityWebApplicationInitializer.java
[source,java]
----
package org.springframework.security.samples.config;

import org.springframework.security.web.context.*;

public class MessageSecurityWebApplicationInitializer
      extends AbstractSecurityWebApplicationInitializer {
}
----

`MessageSecurityWebApplicationInitializer`将为您的应用程序中的每个URL自动注册springSecurityFilterChain过滤器。如果在其他`WebApplicationInitializer`实例中添加了过滤器，我们可以使用`@Order`来控制过滤器实例的排序。

=== 验证SecurityConfig已加载

仅仅因为<<security-config-java,SecurityConfig>>存在，并不意味着我们的Spring应用程序知道它。在这个例子中，我们的Spring根应用程序上下文使用MessageWebApplicationInitializer进行初始化，MessageWebApplicationInitializer包含在我们的spring-security-samples-javaconfig-messages项目中。你可以在下面找到它的一个片段：

[[message-web-application-inititializer-java]]
.MessageWebApplicationInitializer.java
[source,java]
----
public class MessageWebApplicationInitializer extends
        AbstractAnnotationConfigDispatcherServletInitializer {

    @Override
    protected Class<?>[] getRootConfigClasses() {
        return new Class[] { RootConfiguration.class };
    }

    // ... other overrides ...
}
----

您会注意到它正在加载也包含在我们的spring-security-samples-javaconfig-messages项目中的`RootConfiguration`类。

[[root-configuration-java]]
.RootConfiguration.java
[source,java]
----
@Configuration
@ComponentScan
public class RootConfiguration {
}
----

`@ComponentScan`加载与`RootConfiguration`相同的包（和子包）中的所有配置。由于<<security-config-java,SecurityConfig>>在这个软件包中，它将被加载到我们现有的设置中，并且没有其他要做的事情了。

注意：如果没有加载<<security-config-java,SecurityConfig>>，我们可以使用<<root-configuration-java,RootConfiguration>>的类定义上方的`@Import(SecurityConfig.class)`或添加<<security-config-java,SecurityConfig>>作为`getRootConfigClasses()`的结果之一。

include::{hello-include-dir}/exploring-the-secured-application-javaconfig.asc[]

==== 显示用户名

现在我们已经通过身份验证，让我们看看我们的应用程序在用户身份验证后如何显示用户名。

.messages / src目录/主/资源/视图/的layout.html
[source,html]
----
<div th:if="${#httpServletRequest.remoteUser != null}">
    <p th:text="${#httpServletRequest.remoteUser}">
      sample_user
    </p>
</div>
----

在我们的示例中，我们使用 http://www.thymeleaf.org/[Thymeleaf]，但任何视图技术都可以使用。任何技术都可以检查`HttpServletRequest#getRemoteUser()`以查看当前用户，因为Spring Security与<<servlet-api-integration,Servlet API methods>>集成在一起。

警告：Thymeleaf确保用户名被转义以避免 http://en.wikipedia.org/wiki/Cross-site_scripting[XSS漏洞]无论应用程序如何呈现用户输入的值，它都应确保值正确转义。

==== 注销

我们可以查看用户名，但我们如何才能注销？您可以在下面看到我们如何注销。

.messages / src目录/主/资源/视图/的layout.html
[source,html]
----
<form th:action="@{/logout}" method="post">
    <input type="submit" value="Log out" />
</form>
----

为了帮助防范 http://en.wikipedia.org/wiki/Cross-site_request_forgery[CSRF攻击]，默认情况下，Spring Security Java Configuration注销需要：

*  HTTP方法必须是POST
*  CSRF令牌必须添加到请求中。由于我们使用了`@EnableWebSecurity`并且正在使用Thymeleaf，因此CSRF令牌会自动添加为您的隐藏输入（查看源代码以查看它）。

注意：如果您不使用Spring MVC taglibs或Thymeleaf，则可以使用属性_csrf访问ServletRequest上的CsrfToken。您可以在 link:helloworld-javaconfig.html[你好Spring Security Java Config]中找到一个将CSRF令牌包含在JSP中的示例。

重新启动应用程序服务器，然后单击注销按钮并查看该应用程序已成功注销。

== 结论

您现在应该知道如何使用Spring Security来保护您的应用程序，而不使用任何XML。接下来，我们将看到如何 link:form-javaconfig.html[定制我们的登录表单]。

= 创建自定义登录表单
:author: Rob Winch
:starter-appname: hellomvc
:starter-config-type: javaconfig
:completed-appname: form
:completed-config-type: javaconfig
:include-dir: _includes

本指南由 link:hellomvc-javaconfig.html[你好Spring MVC安全Java配置]构建，以解释如何使用Spring Security Java Configuration配置和使用自定义登录表单。

include::{include-dir}/setting-up-the-sample.asc[]

确认应用程序正在运行：

* 用*username* _user_和*password* _password_验证后，可以在http：// localhost：8080 / sample /中看到显示用户收件箱的页面。
* 尝试点击撰写链接并创建消息。应显示消息详细信息。
* 现在点击收件箱链接并查看列出的消息。您可以点击摘要链接查看再次显示的详细信息。


= 覆盖默认配置（HttpSecurity）方法

正如我们在 link:hellomvc-javaconfig.html[你好Spring MVC安全Java配置]中看到的，Spring Security的`WebSecurityConfigurerAdapter`提供了一些方便的默认设置来获取我们的应用程序
快速运行。但是，我们的登录表单看起来不像我们的其他应用程序。我们来看看我们如何更新配置来使用自定义表单。

== 默认配置（HttpSecurity）

配置（HttpSecurity）方法的默认配置如下所示：

[source,java]
----
protected void configure(HttpSecurity http) throws Exception {
    http
        .authorizeRequests()
            .anyRequest().authenticated() <1>
            .and()
        .formLogin()                      <2>
            .and()
        .httpBasic();                     <3>
}
----

该配置可确保：

<1>每个请求都需要用户进行身份验证
支持基于表单的身份验证<2>
<3>支持HTTP基本认证

== 配置自定义登录页面

我们希望确保我们能够弥补在更新中覆盖这些默认值。打开`SecurityConfig`并插入configure方法，如下所示：

的.src /主/ JAVA /组织/ springframework的/安全/样品/配置/ SecurityConfig.java
[source,java]
----
// ...

import org.springframework.security.config.annotation.web.builders.HttpSecurity;

@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http
            .authorizeRequests()
                .anyRequest().authenticated()
                .and()
            .formLogin()
                .loginPage("/login");
    }

    // ...
}
----

第`loginPage("/login")`行指示Spring Security

* 需要身份验证时，请将浏览器重定向到*/login*
* 我们负责在请求*/login*时呈现登录页面
* 当验证尝试失败时，将浏览器重定向到*/login?error*（因为我们没有另外指定）
* 我们负责在请求*/login?error*时呈现失败页面
成功注销后* ，将浏览器重定向到*/login?logout*（因为我们没有另外指定）
* 我们负责在请求*/login?logout*时呈现注销确认页面

继续并启动服务器并尝试访问http：// localhost：8080 / sample /以查看我们配置的更新。在许多浏览器中，您会看到类似于*This webpage has a redirect loop*的错误。发生什么事？

== 授予对未经身份验证的用户的访问权限

问题是Spring Security正在保护对我们自定义登录页面的访问。特别是以下情况正在发生：

* 我们向我们的Web应用程序发出请求
*  Spring Security认为我们没有通过身份验证
* 我们被重定向到*/login*
* 浏览器请求*/login*
*  Spring Security认为我们没有通过身份验证
* 我们被重定向到*/login* ...

为了解决这个问题，我们需要指示Spring Security允​​许任何人访问*/login*网址。我们可以通过以下更新轻松完成此操作：

的.src /主/ JAVA /组织/ springframework的/安全/样品/配置/ SecurityConfig.java
[source,java]
----
// ...

@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http
            .authorizeRequests()
                .anyRequest().authenticated()
                .and()
            .formLogin()
                .loginPage("/login")
                .permitAll();
    }

    // ...
}
----

`formLogin().permitAll()`语句方法指示Spring Security允​​许任何访问与`formLogin()`关联的任何URL（即*/login*和*/login?error*）。

注意：授予对`formLogin()`网址的访问权限并不是默认完成的，因为Spring Security需要对允许和不允许的内容做出某些假设。为了安全起见，最好确保授予资源访问权限是明确的。

启动服务器并尝试访问http：// localhost：8080 / sample /以查看我们配置的更新。您现在应该收到一个500错误，指出**Error resolving template "login"**。

= 创建登录页面

在Spring Web MVC中，创建我们的登录页面有两个步骤：

* 创建一个控制器
* 创建一个视图

== 配置登录视图控制器

在Spring Web MVC中，第一步是确保我们有一个可以指向我们视图的控制器。由于我们的项目将*javaconfig/messages*项目添加为依赖项，并且它包含*/login*的视图控制器，所以我们无需在应用程序内创建控制器。作为参考，你可以看到下面的配置：

[source,java]
----
// ...

@EnableWebMvc
@ComponentScan("org.springframework.security.samples.mvc")
public class WebMvcConfiguration implements WebMvcConfigurer {

    // ...

    @Override
    public void addViewControllers(ViewControllerRegistry registry) {
        registry.addViewController("/login").setViewName("login");
        registry.setOrder(Ordered.HIGHEST_PRECEDENCE);
    }
}
----

== 创建登录视图

我们现有的配置意味着我们需要做的就是创建一个包含以下内容的*login.html*文件：

的.src /主/资源/视图/ login.html的
[source,xml]
----
<html xmlns:th="http://www.thymeleaf.org">
  <head th:include="layout :: head(title=~{::title},links=~{})">
    <title>Please Login</title>
  </head>
  <body th:include="layout :: body" th:with="content=~{::content}">
    <div th:fragment="content">
        <form name="f" th:action="@{/login}" method="post">               <1>
            <fieldset>
                <legend>Please Login</legend>
                <div th:if="${param.error}" class="alert alert-error">    <2>
                    Invalid username and password.
                </div>
                <div th:if="${param.logout}" class="alert alert-success"> <3>
                    You have been logged out.
                </div>
                <label for="username">Username</label>
                <input type="text" id="username" name="username"/>        <4>
                <label for="password">Password</label>
                <input type="password" id="password" name="password"/>    <5>
                <div class="form-actions">
                    <button type="submit" class="btn">Log in</button>
                </div>
            </fieldset>
        </form>
    </div>
  </body>
</html>
----

<1>我们提交用户名和密码的网址与我们的登录表单（即*/login*）的网址相同，但为*POST*，而不是*GET*。
<2>身份验证失败时，浏览器会重定向到*/login?error*，因此我们可以通过检测参数*error*是否为非空来显示错误消息。
<3>我们成功注销后，浏览器会重定向到*/login?logout*，因此我们可以通过检测参数*logout*是否为非空来显示注销成功消息。
<4>用户名应该存在于HTTP参数用户名中
<5>密码应该存在于HTTP参数密码中

重要提示：不要显示有关身份验证失败原因的详细信息。例如，我们不希望显示用户不存在，因为这会告诉攻击者他们应该尝试使用不同的用户名。

提示：我们使用Thymeleaf自动将CSRF令牌添加到我们的表单。如果我们不使用Thymleaf或Spring MVC taglib，我们也可以使用`<input type="hidden" name="${_csrf.parameterName}" value="${_csrf.token}"/>`手动添加CSRF令牌。

启动服务器并尝试访问http：// localhost：8080 / sample /以查看我们配置的更新。我们现在看到了我们的登录页面，但它看起来并不漂亮。问题是我们没有授予对css文件的访问权限。

== 授予对剩余资源的访问权限

我们需要更新我们的配置，以允许任何人访问我们的资源和我们的注销页面。更新配置，如下所示：

的.src /主/ JAVA /组织/ springframework的/安全/样品/配置/ SecurityConfig.java
[source,java]
----
// ...

@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http
            .authorizeRequests()
                .antMatchers("/resources/**").permitAll() <1>
                .anyRequest().authenticated()
                .and()
            .formLogin()
                .loginPage("/login")
                .permitAll()
                .and()
            .logout()                                    <2>
                .permitAll();
    }

    // ...
}
----

<1>这允许任何人访问以*/resources/*开头的网址。由于这是我们的CSS，JavaScript和图像存储的地方，我们所有的静态资源都可以被任何人查看。
<2>如您所料，`logout().permitAll()`允许任何用户请求注销并查看注销成功URL。


重新启动服务器并尝试访问http：// localhost：8080 / sample /以查看我们配置的更新。我们现在看到一个看起来像我们应用程序其余部分的自定义登录页面。

* 尝试输入无效的用户名和密码。你会看到我们的错误消息显示。
* 尝试输入有效的用户名（用户名）和密码（密码）。您将成功通过身份验证。
* 请尝试单击注销按钮。您会看到我们的注销成功消息

== 结论

您现在应该知道如何使用Spring Security的Java配置添加自定义登录表单。要了解更多信息，请参阅 link:index.html[Spring Security Guides索引页面]。
